<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <link rel="stylesheet" href="/game.css"/>
  <title>Quizmato; Game</title>
  <style>
    .question-section { display: none; }
  </style>
</head>
<body>
  <div class="container">
    <nav>
      <h1>Quizmato</h1>
        <button id="start-game">Start Game</button>
      <form id="edit-account" action="/profile" method="POST">
      <button id="editAccountButton">Profile</button>
      </form>
      <form id="score-saver" action="/savescore" method="POST">
        <button id="scoresave">Save Score</button>
      </form> 
      <a href="/leaderboard">Leaderboard</a>
      <form id="logout-form" action="/logout" method="POST">
        <button type="submit" id="logout">Log out</button>
      </form>
    </nav>
    <nav><h1><%= typeof username !== 'undefined' ? 'Welcome, ' + username + '!' : 'No Username Found' %></h1></nav>
    <div class="question-section">
      <h2>Question: <span id="question-number">1</span></h2>
      <h2>Score: <span id="score">0</span></h2>
      <h2>Attempts: <span id="attempts">5</span></h2>
      <h2>Timer: <span id="time">60</span></h2>
      <span id="dateandtime" hidden>lol</span>
      <img src="https://placehold.co/600x400" id="qimg" alt="imgmain">
      <div id="buttons"></div>
      <nav>
        <button type="button" value="Go back!" onclick="history.back()">Back</button>
      </nav>
    </div>
  </div>
  <script>
    const buttons = [];
    let questionNumber = 1, attempts = 3, score = 0, timerInterval;
    const startGameButton = document.getElementById('start-game');
    const questionSection = document.querySelector('.question-section');
    const questionNumberElement = document.getElementById('question-number');
    const questionImage = document.getElementById('qimg');
    const scoreElement = document.getElementById('score');
    const dateElement = document.getElementById('dateandtime');
    const attemptsElement = document.getElementById('attempts');
    const timeElement = document.getElementById('time');
    const buttonsContainer = document.getElementById('buttons');
    const saveScoreButton = document.getElementById('scoresave');
    const scoreSaverForm = document.getElementById('score-saver');
    //event listner to start the game
    function creategame() {
      createButtons();
      startGameButton.addEventListener('click', startQuiz, { once: true });
    }
    //10 buttons create 0-9
    function createButtons() {
      for (let i = 0; i < 10; i++) {
        const button = document.createElement('button');
        button.textContent = `${i}`;
        buttons.push(button);
      }
    }
    //question and answer fetched from tomato api
    async function fetchQuestion() {
      try {
        const response = await fetch("https://marcconrad.com/uob/tomato/api.php");
        const json = await response.json();
        displayQuestion(json);
        setupButtonEvents(json.solution);
      } catch (error) {
        console.error("Error fetching question:", error);
      }
    }
    //date and time fetched from api
    async function datentime() {
      try {
        const responseip = await fetch("https://api.ipify.org?format=json");
        const ipjson = await responseip.json();
        const clientIP = ipjson.ip;
        console.log(clientIP);
        const token = "f036bf75fe1b445ebabede3bdcc51012";
        const responsefromtime = await fetch(`https://api.ipgeolocation.io/timezone?apiKey=${token}&ip=${clientIP}`);
        const jsonfromtime = await responsefromtime.json();
        const datetime = jsonfromtime.date_time;
        console.log(datetime);
        setdate(datetime);
      } catch (error) {
        console.error("Error fetching time:", error);
      }
    }
    function setdate(day){
      dateElement.textContent = day;
    }
    //display the question
    function displayQuestion(questionData) {
      questionImage.src = questionData.question;
      questionNumberElement.textContent = questionNumber;
      attemptsElement.textContent = attempts;
      buttonsContainer.innerHTML = ''; // Clear previous buttons
      buttons.forEach((button) => {
        buttonsContainer.appendChild(button.cloneNode(true));
      });
    }
    //if the correct answer is selected it is sent to handleanswer
    function setupButtonEvents(solution) {
      console.log(solution);
      const clonedButtons = buttonsContainer.querySelectorAll('button');
      clonedButtons.forEach((button) => {
        button.addEventListener('click', () => handleAnswer(button, solution), { once: true });
      });
    }
    //this handles the event when the correct answer is triggered
    function handleAnswer(button, solution) {
      if (button.textContent == solution) {
        updateScore(10);
        attempts = attempts+1;
        attemptsElement.textContent = attempts;
        loadNewQuestion();
      } else {
        attempts--;
        if (attempts == 0) loadNewQuestion();
        else console.log(`Question ${questionNumber}: Attempts left: ${attempts}`);
        updateScore(-2);
        attemptsElement.textContent = attempts;
      }
    }
    //score updated
    function updateScore(points) {
      score += points;
      scoreElement.textContent = score;
      return score;
    }
    //reveals quiz elements AND SETS TIME 
    function startQuiz() {
      questionSection.style.display = 'block';
      fetchQuestion();
      let timerSeconds = 60;
      timeElement.textContent = timerSeconds;
      startGameButton.style.display = 'none';
      timerInterval = setInterval(() => {
        if (timerSeconds == 0) {
          clearInterval(timerInterval);
          endGame();
        } else {
          timerSeconds--;
          timeElement.textContent = timerSeconds;
        }
      }, 1000);
    }
  //NEW QUESTION IS LOADED
    function loadNewQuestion() {
      attempts = 3;
      questionNumber++;
      fetchQuestion();
    }
  //END GAME FUNCTION
    function endGame() {
    clearInterval(timerInterval);
    console.log("Game Over!");

    questionImage.style.display = 'none';
    questionImage.src = 'https://placehold.co/600x400';

    const replayButton = document.createElement('button');
    replayButton.textContent = 'Replay';
    replayButton.addEventListener('click', () => location.reload());

    document.body.appendChild(replayButton);
}


  // Add an event listener to the "Save Score" button
  let eventTriggered = false;

const saveScoreEvent = async (event) => {
  if (!eventTriggered) {
    const scoreValue = scoreElement.textContent.toString();
    const dateValue = dateElement.textContent.toString();
    const requestBody = {
      score: scoreValue,
      datetime: dateValue
    };

    try {
      const response = await fetch('/savescore', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      const responseData = await response.json();
      if (response.ok) {
        console.log('Score Saved');
        eventTriggered = true;
        saveScoreButton.removeEventListener('click', saveScoreEvent);
      } else {
        console.error('Failed to save score:', responseData.error);
      }
    } catch (error) {
      console.error('Error saving score:', error);
    }
  }
};

saveScoreButton.addEventListener('click', saveScoreEvent, { once: true });

    creategame();
    datentime();
  </script>
</body>
</html>
